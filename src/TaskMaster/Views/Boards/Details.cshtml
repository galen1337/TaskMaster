@model Domain.Entities.Board

<h2>@Model.Name</h2>
<p>Project: <a asp-controller="Projects" asp-action="Details" asp-route-id="@Model.ProjectId">@Model.Project.Name</a></p>
@if (TempData["Success"] is string s)
{
	<div class="alert alert-success">@s</div>
}
@if (TempData["Error"] is string e)
{
	<div class="alert alert-danger">@e</div>
}

<div class="mb-3">
	<button class="btn btn-primary" id="openCreateCard" data-board-id="@Model.Id">Add card +</button>
</div>

<style>
	.kanban-column { background: #f8f9fb; border-radius: 12px; padding: 10px; box-shadow: 0 1px 2px rgba(0,0,0,.06); }
	.kanban-column .column-header { font-weight: 600; font-size: .9rem; color: #506176; display: flex; align-items: center; justify-content: space-between; margin: 6px 6px 10px; }
	.kanban-list { min-height: 40px; }
	.kanban-card { border: 1px solid #e6e9ef; border-radius: 10px; padding: 10px; margin: 8px 6px; background:#fff; box-shadow: 0 1px 2px rgba(0,0,0,.04); cursor: grab; display:flex; flex-direction:column; height: 140px; }
	.kanban-card .title { font-weight: 600; color: #1f2937; }
	.kanban-card .desc { color:#4b5563; font-size:.85rem; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; margin: 4px 0 6px; }
	.kanban-card .meta { color:#6b7280; font-size:.8rem; margin-top:auto; }
	.avatar { width:24px; height:24px; border-radius:50%; background:#e5e7eb; display:inline-flex; align-items:center; justify-content:center; font-size:.65rem; font-weight:600; color:#374151; }
	.drag-ghost { opacity: .4; }
	/* Priority colors */
	.priority-low { color: green; }
	.priority-medium { color: goldenrod; }
	.priority-high { color: orange; }
	.priority-critical { color: red; }
</style>

<div class="row" id="board" data-board-id="@Model.Id">
	@foreach (var col in Model.Columns.OrderBy(c => c.Order))
	{
		<div class="col-md-4">
			<div class="kanban-column">
				<div class="column-header">@col.Name</div>
				<ul class="list-unstyled kanban-list" data-column-id="@col.Id">
					@foreach (var card in Model.Cards.Where(c => c.ColumnId == col.Id).OrderBy(c => c.Priority))
					{
						<li class="kanban-card" data-card-id="@card.Id">
							<div class="d-flex justify-content-between align-items-start">
								<div class="title">@card.Title</div>
								<a class="btn btn-sm btn-link p-0" href="#" data-card-details="@card.Id">Details</a>
							</div>
							@if (!string.IsNullOrWhiteSpace(@card.Description))
							{
								<div class="desc">@card.Description</div>
							}
							<div class="meta d-flex align-items-center gap-2">
								@{
									var pClass = card.Priority switch
									{
										Domain.Enums.Priority.Low => "priority-low",
										Domain.Enums.Priority.Medium => "priority-medium",
										Domain.Enums.Priority.High => "priority-high",
										Domain.Enums.Priority.Critical => "priority-critical",
										_ => string.Empty
									};
								}
								<span class="@pClass">@card.Priority</span>
								@if (!string.IsNullOrEmpty(card.Assignee?.Email))
								{
									<span class="avatar" title="@card.Assignee.Email">@card.Assignee.Email.Substring(0,1).ToUpper()</span>
									<span>@card.Assignee.Email</span>
								}
								else { <span>Unassigned</span>; }
							</div>
						</li>
					}
				</ul>
			</div>
		</div>
	}
</div>

@section Scripts{
	<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
	<script>
		(function(){
			const lists = document.querySelectorAll('.kanban-list');
			lists.forEach(list => {
				new Sortable(list, {
					group: 'kanban',
					animation: 150,
					dragClass: 'dragging',
					ghostClass: 'drag-ghost',
					onEnd: async (evt) => {
						const cardId = evt.item.getAttribute('data-card-id');
						const newColumnId = evt.to.getAttribute('data-column-id');
						try {
							const res = await fetch('/Cards/Move', {
								method: 'POST',
								headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'X-Requested-With':'XMLHttpRequest' },
								body: `id=${encodeURIComponent(cardId)}&targetColumnId=${encodeURIComponent(newColumnId)}&__RequestVerificationToken=${encodeURIComponent(getToken())}`
							});
							if (!res.ok) throw new Error('Move failed');
						} catch (e) {
							alert('Could not move card.');
							location.reload();
						}
					}
				});
			});
			function getToken(){
				const el = document.querySelector('input[name="__RequestVerificationToken"]');
				if(el) return el.value;
				const any = document.querySelector('form input[name="__RequestVerificationToken"]');
				return any ? any.value : '';
			}

			// Add card modal via AJAX
			document.getElementById('openCreateCard')?.addEventListener('click', async (e) => {
				e.preventDefault();
				const boardId = e.currentTarget.getAttribute('data-board-id');
				let modalEl = document.getElementById('cardDetailsModal');
				if (!modalEl) {
					const html = `<div class=\"modal fade\" id=\"cardDetailsModal\" tabindex=\"-1\" aria-hidden=\"true\"><div class=\"modal-dialog modal-lg modal-dialog-centered\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Create Card</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div><div class=\"modal-body\"></div></div></div></div>`;
					document.body.insertAdjacentHTML('beforeend', html);
					modalEl = document.getElementById('cardDetailsModal');
				}
				const modal = new bootstrap.Modal(modalEl); modal.show();
				const body = modalEl.querySelector('.modal-body');
				body.innerHTML = '<div class="text-center py-5">Loadingâ€¦</div>';
				try {
					const res = await fetch(`/Cards/CreateForm?boardId=${boardId}`, { headers: { 'X-Requested-With':'XMLHttpRequest' } });
					const html = await res.text();
					body.innerHTML = html;
				} catch { body.innerHTML = '<div class="alert alert-danger">Failed to load form.</div>'; }
			});
		})();
	</script>
} 